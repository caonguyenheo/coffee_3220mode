<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_s_p_i_c_c32_x_x_d_m_a_8h" kind="file" language="C++">
    <compoundname>SPICC32XXDMA.h</compoundname>
    <includes local="no">ti/drivers/dpl/HwiP.h</includes>
    <includes local="no">ti/drivers/dpl/SemaphoreP.h</includes>
    <includes refid="_power_8h" local="no">ti/drivers/Power.h</includes>
    <includes refid="_s_p_i_8h" local="no">ti/drivers/SPI.h</includes>
    <includes refid="_u_d_m_a_c_c32_x_x_8h" local="no">ti/drivers/dma/UDMACC32XX.h</includes>
    <incdepgraph>
      <node id="267">
        <label>stdbool.h</label>
      </node>
      <node id="268">
        <label>stdint.h</label>
      </node>
      <node id="265">
        <label>ti/drivers/dpl/SemaphoreP.h</label>
      </node>
      <node id="266">
        <label>ti/drivers/Power.h</label>
        <link refid="_power_8h"/>
        <childnode refid="267" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
      </node>
      <node id="270">
        <label>stddef.h</label>
      </node>
      <node id="264">
        <label>ti/drivers/dpl/HwiP.h</label>
      </node>
      <node id="269">
        <label>ti/drivers/utils/List.h</label>
        <link refid="_list_8h"/>
        <childnode refid="268" relation="include">
        </childnode>
        <childnode refid="267" relation="include">
        </childnode>
        <childnode refid="270" relation="include">
        </childnode>
      </node>
      <node id="271">
        <label>ti/drivers/SPI.h</label>
        <link refid="_s_p_i_8h"/>
        <childnode refid="267" relation="include">
        </childnode>
        <childnode refid="270" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
      </node>
      <node id="272">
        <label>ti/drivers/dma/UDMACC32XX.h</label>
        <link refid="_u_d_m_a_c_c32_x_x_8h"/>
        <childnode refid="268" relation="include">
        </childnode>
        <childnode refid="267" relation="include">
        </childnode>
        <childnode refid="264" relation="include">
        </childnode>
      </node>
      <node id="263">
        <label>SPICC32XXDMA.h</label>
        <link refid="_s_p_i_c_c32_x_x_d_m_a_8h"/>
        <childnode refid="264" relation="include">
        </childnode>
        <childnode refid="265" relation="include">
        </childnode>
        <childnode refid="266" relation="include">
        </childnode>
        <childnode refid="271" relation="include">
        </childnode>
        <childnode refid="272" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1" prot="public">SPICC32XXDMA_HWAttrsV1</innerclass>
    <innerclass refid="struct_s_p_i_c_c32_x_x_d_m_a___object" prot="public">SPICC32XXDMA_Object</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_s_p_i_c_c32_x_x_d_m_a_8h_1a0f7b6a7a9dfc220b703fae27ab0f2a1b" prot="public" static="no">
        <name>SPICC32XXDMA_PIN_05_CLK</name>
        <initializer>0x0704</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PIN 5 is used for SPI CLK </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" line="191" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_p_i_c_c32_x_x_d_m_a_8h_1a04449b2d27de7b2a70d38f98769b9f6b" prot="public" static="no">
        <name>SPICC32XXDMA_PIN_06_MISO</name>
        <initializer>0x0705</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PIN 6 is used for MISO </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" line="192" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_p_i_c_c32_x_x_d_m_a_8h_1abd21b471135554af10ed8cc0b6403993" prot="public" static="no">
        <name>SPICC32XXDMA_PIN_07_MOSI</name>
        <initializer>0x0706</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PIN 7 is used for MOSI </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" line="193" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_p_i_c_c32_x_x_d_m_a_8h_1ae98f6dad605ba4858c781f6ac1c055ae" prot="public" static="no">
        <name>SPICC32XXDMA_PIN_08_CS</name>
        <initializer>0x0707</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PIN 8 is used for CS </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" line="194" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_p_i_c_c32_x_x_d_m_a_8h_1ae2864067fa1ab0e2e6be5bd22d88afcd" prot="public" static="no">
        <name>SPICC32XXDMA_PIN_45_CLK</name>
        <initializer>0x072C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PIN 45 is used for SPI CLK </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" line="195" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_p_i_c_c32_x_x_d_m_a_8h_1a967ce7cc61ed9cbf33fbfc07b763c099" prot="public" static="no">
        <name>SPICC32XXDMA_PIN_50_CS</name>
        <initializer>0x0931</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PIN 50 is used for CS </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" line="196" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_p_i_c_c32_x_x_d_m_a_8h_1a2b58fe563f17555b2e5080e8b49e9728" prot="public" static="no">
        <name>SPICC32XXDMA_PIN_52_MOSI</name>
        <initializer>0x0833</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PIN 52 is used for MOSI </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" line="197" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_p_i_c_c32_x_x_d_m_a_8h_1a9b15ba6055b44cde5590202a4c1a4282" prot="public" static="no">
        <name>SPICC32XXDMA_PIN_53_MISO</name>
        <initializer>0x0734</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>PIN 53 is used for MISO </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" line="198" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_p_i_c_c32_x_x_d_m_a_8h_1ae945ff9c77552e825b903f25a65acecf" prot="public" static="no">
        <name>SPICC32XXDMA_PIN_NO_CONFIG</name>
        <initializer>0xFFFF</initializer>
        <briefdescription>
<para>Indicates a pin is not to be configured by the SPICC32XXDMA driver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" line="203" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_s_p_i_c_c32_x_x_d_m_a_8h_1a60415379dfba0b9b9ccb296ca3bfa6f3" prot="public" static="no">
        <type>struct <ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1" kindref="compound">SPICC32XXDMA_HWAttrsV1</ref></type>
        <definition>typedef struct SPICC32XXDMA_HWAttrsV1  SPICC32XXDMA_HWAttrsV1</definition>
        <argsstring></argsstring>
        <name>SPICC32XXDMA_HWAttrsV1</name>
        <briefdescription>
<para>SPICC32XXDMA Hardware attributes. </para>        </briefdescription>
        <detaileddescription>
<para>These fields, with the exception of intPriority, are used by driverlib APIs and therefore must be populated by driverlib macro definitions. For CCWare these definitions are found in:<itemizedlist>
<listitem><para>driverlib/prcm.h</para></listitem><listitem><para>driverlib/spi.h</para></listitem><listitem><para>driverlib/udma.h</para></listitem><listitem><para>inc/hw_memmap.h</para></listitem><listitem><para>inc/hw_ints.h</para></listitem></itemizedlist>
</para><para>intPriority is the SPI peripheral&apos;s interrupt priority, as defined by the underlying OS. It is passed unmodified to the underlying OS&apos;s interrupt handler creation code, so you need to refer to the OS documentation for usage. For example, for SYS/BIOS applications, refer to the ti.sysbios.family.arm.m3.Hwi documentation for SYS/BIOS usage of interrupt priorities. If the driver uses the ti.dpl interface instead of making OS calls directly, then the HwiP port handles the interrupt priority in an OS specific way. In the case of the SYS/BIOS port, intPriority is passed unmodified to Hwi_create().</para><para>A sample structure is shown below: <programlisting><codeline><highlight class="normal">#if<sp/>defined(__TI_COMPILER_VERSION__)</highlight></codeline>
<codeline><highlight class="normal">#pragma<sp/>DATA_ALIGN(scratchBuf,<sp/>32)</highlight></codeline>
<codeline><highlight class="normal">#elif<sp/>defined(__IAR_SYSTEMS_ICC__)</highlight></codeline>
<codeline><highlight class="normal">#pragma<sp/>data_alignment=32</highlight></codeline>
<codeline><highlight class="normal">#elif<sp/>defined(__GNUC__)</highlight></codeline>
<codeline><highlight class="normal">__attribute__<sp/>((aligned<sp/>(32)))</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>scratchBuf;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>SPICC32XXDMA_HWAttrsV1<sp/>SPICC32XXDMAHWAttrs[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.baseAddr<sp/>=<sp/>GSPI_BASE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.intNum<sp/>=<sp/>INT_GSPI,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.intPriority<sp/>=<sp/>(~0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.spiPRCM<sp/>=<sp/>PRCM_GSPI,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.csControl<sp/>=<sp/>SPI_HW_CTRL_CS,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.csPolarity<sp/>=<sp/>SPI_CS_ACTIVELOW,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pinMode<sp/>=<sp/>SPI_4PIN_MODE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.turboMode<sp/>=<sp/>SPI_TURBO_OFF,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scratchBufPtr<sp/>=<sp/>&amp;scratchBuf,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.defaultTxBufValue<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rxChannelIndex<sp/>=<sp/>UDMA_CH6_GSPI_RX,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.txChannelIndex<sp/>=<sp/>UDMA_CH7_GSPI_TX,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.minDmaTransferSize<sp/>=<sp/>100,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mosiPin<sp/>=<sp/>SPICC32XXDMA_PIN_07_MOSI,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.misoPin<sp/>=<sp/>SPICC32XXDMA_PIN_06_MISO,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.clkPin<sp/>=<sp/>SPICC32XXDMA_PIN_05_CLK,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.csPin<sp/>=<sp/>SPICC32XXDMA_PIN_08_CS,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_p_i_c_c32_x_x_d_m_a_8h_1a5af790fb533b67433e074e6e323b6e8d" prot="public" static="no">
        <type>struct <ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object" kindref="compound">SPICC32XXDMA_Object</ref></type>
        <definition>typedef struct SPICC32XXDMA_Object  SPICC32XXDMA_Object</definition>
        <argsstring></argsstring>
        <name>SPICC32XXDMA_Object</name>
        <briefdescription>
<para>SPICC32XXDMA Object. </para>        </briefdescription>
        <detaileddescription>
<para>The application must not access any member variables of this structure! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_s_p_i_c_c32_x_x_d_m_a_8h_1a3111e84cd0c76d19a79c2ad1d12795c4" prot="public" static="no">
        <type>struct <ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object" kindref="compound">SPICC32XXDMA_Object</ref> *</type>
        <definition>typedef struct SPICC32XXDMA_Object * SPICC32XXDMA_Handle</definition>
        <argsstring></argsstring>
        <name>SPICC32XXDMA_Handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" line="344" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_s_p_i_c_c32_x_x_d_m_a_8h_1ad804358f32b99442f86f3ef1f74255b9" prot="public" static="no" mutable="no">
        <type>const <ref refid="_s_p_i_8h_1a4e8e5691222e58e20960a9b82354a358" kindref="member">SPI_FxnTable</ref></type>
        <definition>const SPI_FxnTable SPICC32XXDMA_fxnTable</definition>
        <argsstring></argsstring>
        <name>SPICC32XXDMA_fxnTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h" line="206" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>SPI driver implementation for a CC32XX SPI controller using the micro DMA controller. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para>The SPI header file should be included in an application as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/SPI.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/spi/SPICC32XXDMA.h&gt;</highlight></codeline>
</programlisting></para><para>Refer to <ref refid="_s_p_i_8h" kindref="compound">SPI.h</ref> for a complete description of APIs &amp; example of use.</para><para>This SPI driver implementation is designed to operate on a CC32XX SPI controller using a micro DMA controller.</para><para><heading level="2">Frame Formats</heading>
</para><para>This SPI controller supports 4 phase &amp; polarity formats. Refer to the device specific data sheets &amp; technical reference manuals for specifics on each format.</para><para><heading level="2">SPI Chip Select</heading>
</para><para>This SPI controller supports a hardware chip select pin. Refer to the device&apos;s user manual on how this hardware chip select pin behaves in regards to the SPI frame format.</para><para><table rows="3" cols="3"><row>
<entry thead="yes"><para>Chip select type </para></entry><entry thead="yes"><para>SPI_MASTER mode </para></entry><entry thead="yes"><para>SPI_SLAVE mode  </para></entry></row>
<row>
<entry thead="no"><para>Hardware chip select </para></entry><entry thead="no"><para>No action is needed by the application to select the peripheral. </para></entry><entry thead="no"><para>See the device documentation on it&apos;s chip select requirements.  </para></entry></row>
<row>
<entry thead="no"><para>Software chip select </para></entry><entry thead="no"><para>The application is responsible to ensure that correct SPI slave is selected before performing a <ref refid="_s_p_i_8h_1a989e17f96b54fcc3dc2cac5f8ac6bdb2" kindref="member">SPI_transfer()</ref>. </para></entry><entry thead="no"><para>See the device documentation on it&apos;s chip select requirements.  </para></entry></row>
</table>
</para><para><heading level="2">SPI data frames</heading>
</para><para>SPI data frames can be any size from 4-bits to 32-bits. The SPI data frame size is set in <ref refid="struct_s_p_i___params___1a39376e78235d5329b958ca7561b9fea8" kindref="member">SPI_Params.dataSize</ref> passed to SPI_open. The SPICC32XXDMA driver implementation makes assumptions on the element size of the <ref refid="_s_p_i_8h_1a8db1a57134d152fae8659739b6f37c71" kindref="member">SPI_Transaction</ref> txBuf and rxBuf arrays, based on the data frame size. If the data frame size is less than or equal to 8 bits, txBuf and rxBuf are assumed to be arrays of 8-bit uint8_t elements. If the data frame size is greater than 8 bits, but less than or equal to 16 bits, txBuf and rxBuf are assumed to be arrays of 16-bit uint16_t elements. Otherwise, txBuf and rxBuf are assumed to point to 32-bit uint32_t elements.</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para>data frame size </para></entry><entry thead="yes"><para>buffer element size  </para></entry></row>
<row>
<entry thead="no"><para>4-8 bits </para></entry><entry thead="no"><para>uint8_t </para></entry></row>
<row>
<entry thead="no"><para>9-16 bits </para></entry><entry thead="no"><para>uint16_t </para></entry></row>
<row>
<entry thead="no"><para>17-32 bits </para></entry><entry thead="no"><para>uint32_t </para></entry></row>
</table>
Data buffers in transactions (rxBuf &amp; txBuf) must be address aligned according to the data frame size. For example, if data frame is 9-bit (driver assumes buffers are uint16_t) rxBuf &amp; txBuf must be aligned on a 16-bit address boundary, if data frame is 20-bit (driver assumes buffers are uint32_t) rxBuf &amp; txBuf must be aligned on a 32-bit address boundary.</para><para><heading level="2">DMA Interrupts</heading>
</para><para>This driver is designed to operate with the micro DMA. The micro DMA generates an interrupt on the perpheral&apos;s interrupt vector. This implementation automatically installs a DMA aware hardware ISR to service the assigned micro DMA channels.</para><para><heading level="2">DMA accessible memory</heading>
</para><para>As this driver uses uDMA to transfer data/from data buffers, it is the responsibility of the application to ensure that these buffers reside in memory that is accessible by the DMA.</para><para><heading level="2">Scratch Buffers</heading>
</para><para>A uint32_t scratch buffer is used to allow SPI_transfers where txBuf or rxBuf are NULL. Rather than requiring txBuf or rxBuf to have a dummy buffer of size of the transfer count, a single DMA accessible uint32_t scratch buffer is used. When rxBuf is NULL, the uDMA will transfer all the SPI data receives into the scratch buffer as a &quot;bit-bucket&quot;. When txBuf is NULL, the scratch buffer is initialized to defaultTxBufValue so the uDMA will send some known value. Each SPI driver instance must have its own scratch buffer.</para><para><heading level="2">Polling SPI transfers</heading>
</para><para>When used in blocking mode small SPI transfers are can be done by polling the peripheral &amp; sending data frame-by-frame. This will not block the task which requested the transfer, but instead immediately perform the transfer &amp; return. The minDmaTransferSize field in the hardware attributes is the threshold; if the transaction count is below the threshold a polling transfer is performed; otherwise a DMA transfer is done. This is intended to reduce the overhead of setting up a DMA transfer to only send a few data frames. Keep in mind that during polling transfers the current task is still being executed; there is no context switch to another task. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2017,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!*****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPICC32XXDMA.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>SPI<sp/>driver<sp/>implementation<sp/>for<sp/>a<sp/>CC32XX<sp/>SPI<sp/>controller<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>micro<sp/>DMA<sp/>controller.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>SPI<sp/>header<sp/>file<sp/>should<sp/>be<sp/>included<sp/>in<sp/>an<sp/>application<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/SPI.h&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/spi/SPICC32XXDMA.h&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>Refer<sp/>to<sp/>@ref<sp/>SPI.h<sp/>for<sp/>a<sp/>complete<sp/>description<sp/>of<sp/>APIs<sp/>&amp;<sp/>example<sp/>of<sp/>use.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>SPI<sp/>driver<sp/>implementation<sp/>is<sp/>designed<sp/>to<sp/>operate<sp/>on<sp/>a<sp/>CC32XX<sp/>SPI</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>controller<sp/>using<sp/>a<sp/>micro<sp/>DMA<sp/>controller.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Frame<sp/>Formats<sp/>#</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>SPI<sp/>controller<sp/>supports<sp/>4<sp/>phase<sp/>&amp;<sp/>polarity<sp/>formats.<sp/>Refer<sp/>to<sp/>the<sp/>device</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>specific<sp/>data<sp/>sheets<sp/>&amp;<sp/>technical<sp/>reference<sp/>manuals<sp/>for<sp/>specifics<sp/>on<sp/>each</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>format.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>SPI<sp/>Chip<sp/>Select<sp/>#</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>SPI<sp/>controller<sp/>supports<sp/>a<sp/>hardware<sp/>chip<sp/>select<sp/>pin.<sp/>Refer<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>device&apos;s<sp/>user<sp/>manual<sp/>on<sp/>how<sp/>this<sp/>hardware<sp/>chip<sp/>select<sp/>pin<sp/>behaves<sp/>in<sp/>regards</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>the<sp/>SPI<sp/>frame<sp/>format.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/>&lt;table&gt;</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/>&lt;th&gt;Chip<sp/>select<sp/>type&lt;/th&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>&lt;th&gt;SPI_MASTER<sp/>mode&lt;/th&gt;</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/>&lt;th&gt;SPI_SLAVE<sp/>mode&lt;/th&gt;</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>&lt;td&gt;Hardware<sp/>chip<sp/>select&lt;/td&gt;</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/>&lt;td&gt;No<sp/>action<sp/>is<sp/>needed<sp/>by<sp/>the<sp/>application<sp/>to<sp/>select<sp/>the<sp/>peripheral.&lt;/td&gt;</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/>&lt;td&gt;See<sp/>the<sp/>device<sp/>documentation<sp/>on<sp/>it&apos;s<sp/>chip<sp/>select<sp/>requirements.&lt;/td&gt;</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/>&lt;td&gt;Software<sp/>chip<sp/>select&lt;/td&gt;</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/>&lt;td&gt;The<sp/>application<sp/>is<sp/>responsible<sp/>to<sp/>ensure<sp/>that<sp/>correct<sp/>SPI<sp/>slave<sp/>is</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>selected<sp/>before<sp/>performing<sp/>a<sp/>SPI_transfer().&lt;/td&gt;</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>&lt;td&gt;See<sp/>the<sp/>device<sp/>documentation<sp/>on<sp/>it&apos;s<sp/>chip<sp/>select<sp/>requirements.&lt;/td&gt;</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/>&lt;/table&gt;</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>SPI<sp/>data<sp/>frames<sp/>#</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/>SPI<sp/>data<sp/>frames<sp/>can<sp/>be<sp/>any<sp/>size<sp/>from<sp/>4-bits<sp/>to<sp/>32-bits.<sp/><sp/>The<sp/>SPI<sp/>data</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/>frame<sp/>size<sp/>is<sp/>set<sp/>in<sp/>::SPI_Params.dataSize<sp/>passed<sp/>to<sp/>SPI_open.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>SPICC32XXDMA<sp/>driver<sp/>implementation<sp/>makes<sp/>assumptions<sp/>on<sp/>the<sp/>element</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>size<sp/>of<sp/>the<sp/>::SPI_Transaction<sp/>txBuf<sp/>and<sp/>rxBuf<sp/>arrays,<sp/>based<sp/>on<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/>frame<sp/>size.<sp/><sp/>If<sp/>the<sp/>data<sp/>frame<sp/>size<sp/>is<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>8<sp/>bits,</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/>txBuf<sp/>and<sp/>rxBuf<sp/>are<sp/>assumed<sp/>to<sp/>be<sp/>arrays<sp/>of<sp/>8-bit<sp/>uint8_t<sp/>elements.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>the<sp/>data<sp/>frame<sp/>size<sp/>is<sp/>greater<sp/>than<sp/>8<sp/>bits,<sp/>but<sp/>less<sp/>than<sp/>or<sp/>equal</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>16<sp/>bits,<sp/>txBuf<sp/>and<sp/>rxBuf<sp/>are<sp/>assumed<sp/>to<sp/>be<sp/>arrays<sp/>of<sp/>16-bit<sp/>uint16_t</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>elements.<sp/><sp/>Otherwise,<sp/>txBuf<sp/>and<sp/>rxBuf<sp/>are<sp/>assumed<sp/>to<sp/>point<sp/>to<sp/>32-bit</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/>uint32_t<sp/>elements.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/>data<sp/>frame<sp/>size<sp/><sp/>|<sp/>buffer<sp/>element<sp/>size<sp/>|</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>--------------<sp/><sp/><sp/>|<sp/>-------------------<sp/>|</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>4-8<sp/>bits<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>9-16<sp/>bits<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/>17-32<sp/>bits<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>Data<sp/>buffers<sp/>in<sp/>transactions<sp/>(rxBuf<sp/>&amp;<sp/>txBuf)<sp/>must<sp/>be<sp/>address<sp/>aligned</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/>according<sp/>to<sp/>the<sp/>data<sp/>frame<sp/>size.<sp/><sp/>For<sp/>example,<sp/>if<sp/>data<sp/>frame<sp/>is<sp/>9-bit</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>(driver<sp/>assumes<sp/>buffers<sp/>are<sp/>uint16_t)<sp/>rxBuf<sp/>&amp;<sp/>txBuf<sp/>must<sp/>be<sp/>aligned</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/>on<sp/>a<sp/>16-bit<sp/>address<sp/>boundary,<sp/>if<sp/>data<sp/>frame<sp/>is<sp/>20-bit<sp/>(driver<sp/>assumes</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/>buffers<sp/>are<sp/>uint32_t)<sp/>rxBuf<sp/>&amp;<sp/>txBuf<sp/>must<sp/>be<sp/>aligned<sp/>on<sp/>a<sp/>32-bit<sp/>address</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/>boundary.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>DMA<sp/>Interrupts<sp/>#</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>driver<sp/>is<sp/>designed<sp/>to<sp/>operate<sp/>with<sp/>the<sp/>micro<sp/>DMA.<sp/>The<sp/>micro<sp/>DMA</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/>generates<sp/>an<sp/>interrupt<sp/>on<sp/>the<sp/>perpheral&apos;s<sp/>interrupt<sp/>vector.<sp/>This</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/>implementation<sp/>automatically<sp/>installs<sp/>a<sp/>DMA<sp/>aware<sp/>hardware<sp/>ISR<sp/>to<sp/>service</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>assigned<sp/>micro<sp/>DMA<sp/>channels.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>DMA<sp/>accessible<sp/>memory<sp/>#</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>As<sp/>this<sp/>driver<sp/>uses<sp/>uDMA<sp/>to<sp/>transfer<sp/>data/from<sp/>data<sp/>buffers,<sp/>it<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>responsibility<sp/>of<sp/>the<sp/>application<sp/>to<sp/>ensure<sp/>that<sp/>these<sp/>buffers<sp/>reside<sp/>in</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/>memory<sp/>that<sp/>is<sp/>accessible<sp/>by<sp/>the<sp/>DMA.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Scratch<sp/>Buffers<sp/>#</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/>uint32_t<sp/>scratch<sp/>buffer<sp/>is<sp/>used<sp/>to<sp/>allow<sp/>SPI_transfers<sp/>where<sp/>txBuf<sp/>or</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/>rxBuf<sp/>are<sp/>NULL.<sp/>Rather<sp/>than<sp/>requiring<sp/>txBuf<sp/>or<sp/>rxBuf<sp/>to<sp/>have<sp/>a<sp/>dummy<sp/>buffer</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>size<sp/>of<sp/>the<sp/>transfer<sp/>count,<sp/>a<sp/>single<sp/>DMA<sp/>accessible<sp/>uint32_t<sp/>scratch</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>buffer<sp/>is<sp/>used.<sp/>When<sp/>rxBuf<sp/>is<sp/>NULL,<sp/>the<sp/>uDMA<sp/>will<sp/>transfer<sp/>all<sp/>the<sp/>SPI<sp/>data</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/>receives<sp/>into<sp/>the<sp/>scratch<sp/>buffer<sp/>as<sp/>a<sp/>&quot;bit-bucket&quot;.<sp/>When<sp/>txBuf<sp/>is<sp/>NULL,<sp/>the</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/>scratch<sp/>buffer<sp/>is<sp/>initialized<sp/>to<sp/>defaultTxBufValue<sp/>so<sp/>the<sp/>uDMA<sp/>will<sp/>send</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>some<sp/>known<sp/>value.<sp/>Each<sp/>SPI<sp/>driver<sp/>instance<sp/>must<sp/>have<sp/>its<sp/>own<sp/>scratch<sp/>buffer.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Polling<sp/>SPI<sp/>transfers<sp/>#</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/>When<sp/>used<sp/>in<sp/>blocking<sp/>mode<sp/>small<sp/>SPI<sp/>transfers<sp/>are<sp/>can<sp/>be<sp/>done<sp/>by<sp/>polling</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>peripheral<sp/>&amp;<sp/>sending<sp/>data<sp/>frame-by-frame.<sp/><sp/>This<sp/>will<sp/>not<sp/>block<sp/>the<sp/>task</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/>which<sp/>requested<sp/>the<sp/>transfer,<sp/>but<sp/>instead<sp/>immediately<sp/>perform<sp/>the<sp/>transfer</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/>&amp;<sp/>return.<sp/><sp/>The<sp/>minDmaTransferSize<sp/>field<sp/>in<sp/>the<sp/>hardware<sp/>attributes<sp/>is</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>threshold;<sp/>if<sp/>the<sp/>transaction<sp/>count<sp/>is<sp/>below<sp/>the<sp/>threshold<sp/>a<sp/>polling</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/>transfer<sp/>is<sp/>performed;<sp/>otherwise<sp/>a<sp/>DMA<sp/>transfer<sp/>is<sp/>done.<sp/><sp/>This<sp/>is<sp/>intended</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>reduce<sp/>the<sp/>overhead<sp/>of<sp/>setting<sp/>up<sp/>a<sp/>DMA<sp/>transfer<sp/>to<sp/>only<sp/>send<sp/>a<sp/>few</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/>data<sp/>frames.<sp/><sp/>Keep<sp/>in<sp/>mind<sp/>that<sp/>during<sp/>polling<sp/>transfers<sp/>the<sp/>current<sp/>task</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/>is<sp/>still<sp/>being<sp/>executed;<sp/>there<sp/>is<sp/>no<sp/>context<sp/>switch<sp/>to<sp/>another<sp/>task.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*******************************************************************************</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_spi_SPICC32XXDMA__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_spi_SPICC32XXDMA__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/drivers/dpl/HwiP.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/drivers/dpl/SemaphoreP.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_power_8h" kindref="compound">ti/drivers/Power.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_s_p_i_8h" kindref="compound">ti/drivers/SPI.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_u_d_m_a_c_c32_x_x_8h" kindref="compound">ti/drivers/dma/UDMACC32XX.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="comment">/*<sp/>Add<sp/>SPICC32XXDMA_STATUS_*<sp/>macros<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="comment">/*<sp/>Add<sp/>SPICC32XXDMA_CMD_*<sp/>macros<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/>Macros<sp/>defining<sp/>possible<sp/>SPI<sp/>signal<sp/>pin<sp/>mux<sp/>options</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>lower<sp/>8<sp/>bits<sp/>of<sp/>the<sp/>macro<sp/>refer<sp/>to<sp/>the<sp/>pin,<sp/>offset<sp/>by<sp/>1,<sp/>to<sp/>match</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/>driverlib<sp/>pin<sp/>defines.<sp/><sp/>For<sp/>example,<sp/>SPICC32XXDMA_PIN_05_CLK<sp/>&amp;<sp/>0xff<sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/>which<sp/>equals<sp/>PIN_05<sp/>in<sp/>driverlib<sp/>pin.h.<sp/><sp/>By<sp/>matching<sp/>the<sp/>PIN_xx<sp/>defines<sp/>in</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/>driverlib<sp/>pin.h,<sp/>we<sp/>can<sp/>pass<sp/>the<sp/>pin<sp/>directly<sp/>to<sp/>the<sp/>driverlib<sp/>functions.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>upper<sp/>8<sp/>bits<sp/>of<sp/>the<sp/>macro<sp/>correspond<sp/>to<sp/>the<sp/>pin<sp/>mux<sp/>confg<sp/>mode</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/>value<sp/>for<sp/>the<sp/>pin<sp/>to<sp/>operate<sp/>in<sp/>the<sp/>SPI<sp/>mode.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/><sp/>PIN_62<sp/>is<sp/>special<sp/>for<sp/>the<sp/>SDSPI<sp/>driver<sp/>when<sp/>using<sp/>an<sp/>SD<sp/>Boosterpack,</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/><sp/>as<sp/>PIN_62<sp/>doesn&apos;t<sp/>have<sp/>an<sp/>assigned<sp/>SPI<sp/>function<sp/>yet<sp/>the<sp/>SD<sp/>Boosterpack</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/><sp/>has<sp/>it<sp/>tied<sp/>to<sp/>the<sp/>CS<sp/>signal.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="_s_p_i_c_c32_x_x_d_m_a_8h_1a0f7b6a7a9dfc220b703fae27ab0f2a1b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPICC32XXDMA_PIN_05_CLK<sp/><sp/><sp/><sp/><sp/>0x0704<sp/></highlight></codeline>
<codeline lineno="192" refid="_s_p_i_c_c32_x_x_d_m_a_8h_1a04449b2d27de7b2a70d38f98769b9f6b" refkind="member"><highlight class="preprocessor">#define<sp/>SPICC32XXDMA_PIN_06_MISO<sp/><sp/><sp/><sp/>0x0705<sp/></highlight></codeline>
<codeline lineno="193" refid="_s_p_i_c_c32_x_x_d_m_a_8h_1abd21b471135554af10ed8cc0b6403993" refkind="member"><highlight class="preprocessor">#define<sp/>SPICC32XXDMA_PIN_07_MOSI<sp/><sp/><sp/><sp/>0x0706<sp/></highlight></codeline>
<codeline lineno="194" refid="_s_p_i_c_c32_x_x_d_m_a_8h_1ae98f6dad605ba4858c781f6ac1c055ae" refkind="member"><highlight class="preprocessor">#define<sp/>SPICC32XXDMA_PIN_08_CS<sp/><sp/><sp/><sp/><sp/><sp/>0x0707<sp/></highlight></codeline>
<codeline lineno="195" refid="_s_p_i_c_c32_x_x_d_m_a_8h_1ae2864067fa1ab0e2e6be5bd22d88afcd" refkind="member"><highlight class="preprocessor">#define<sp/>SPICC32XXDMA_PIN_45_CLK<sp/><sp/><sp/><sp/><sp/>0x072C<sp/></highlight></codeline>
<codeline lineno="196" refid="_s_p_i_c_c32_x_x_d_m_a_8h_1a967ce7cc61ed9cbf33fbfc07b763c099" refkind="member"><highlight class="preprocessor">#define<sp/>SPICC32XXDMA_PIN_50_CS<sp/><sp/><sp/><sp/><sp/><sp/>0x0931<sp/></highlight></codeline>
<codeline lineno="197" refid="_s_p_i_c_c32_x_x_d_m_a_8h_1a2b58fe563f17555b2e5080e8b49e9728" refkind="member"><highlight class="preprocessor">#define<sp/>SPICC32XXDMA_PIN_52_MOSI<sp/><sp/><sp/><sp/>0x0833<sp/></highlight></codeline>
<codeline lineno="198" refid="_s_p_i_c_c32_x_x_d_m_a_8h_1a9b15ba6055b44cde5590202a4c1a4282" refkind="member"><highlight class="preprocessor">#define<sp/>SPICC32XXDMA_PIN_53_MISO<sp/><sp/><sp/><sp/>0x0734<sp/></highlight></codeline>
<codeline lineno="203" refid="_s_p_i_c_c32_x_x_d_m_a_8h_1ae945ff9c77552e825b903f25a65acecf" refkind="member"><highlight class="preprocessor">#define<sp/>SPICC32XXDMA_PIN_NO_CONFIG<sp/><sp/>0xFFFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SPI<sp/>function<sp/>table<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s_p_i___fxn_table__" kindref="compound">SPI_FxnTable</ref><sp/><ref refid="_s_p_i_c_c32_x_x_d_m_a_8h_1ad804358f32b99442f86f3ef1f74255b9" kindref="member">SPICC32XXDMA_fxnTable</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1" kindref="compound">SPICC32XXDMA_HWAttrsV1</ref><sp/>{</highlight></codeline>
<codeline lineno="267" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a291634e7ff74f369d9d7d58c578823ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a291634e7ff74f369d9d7d58c578823ed" kindref="member">baseAddr</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a9a369023434e97b97ec7bc4cd4e997fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a9a369023434e97b97ec7bc4cd4e997fb" kindref="member">intNum</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a4dd7d57fa12208a77dc3b75c2c7bc80e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a4dd7d57fa12208a77dc3b75c2c7bc80e" kindref="member">intPriority</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a9fe09849271730031c5c4c70ec616919" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a9fe09849271730031c5c4c70ec616919" kindref="member">spiPRCM</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1ad6eb0704adcd7eb48897a91b8c564c6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1ad6eb0704adcd7eb48897a91b8c564c6c" kindref="member">csControl</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a6a72e339d4f0ae043f8d96f5cf94634c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a6a72e339d4f0ae043f8d96f5cf94634c" kindref="member">csPolarity</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1abde99321fe08667b6eb1c99a0ab069a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1abde99321fe08667b6eb1c99a0ab069a2" kindref="member">pinMode</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a664c5a41b81b2e8022178bb14a5687e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a664c5a41b81b2e8022178bb14a5687e3" kindref="member">turboMode</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a5803b30a5c618f2f3bb4367e276494d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/>*<ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a5803b30a5c618f2f3bb4367e276494d9" kindref="member">scratchBufPtr</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1ae37a577a5b299ba44485babad490860c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1ae37a577a5b299ba44485babad490860c" kindref="member">defaultTxBufValue</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a91b9e6beabc91f965a7d40d5eb0df650" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a91b9e6beabc91f965a7d40d5eb0df650" kindref="member">rxChannelIndex</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a5832b23fa7855a1a36c1b5ec4258e28e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a5832b23fa7855a1a36c1b5ec4258e28e" kindref="member">txChannelIndex</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a0c1ec73d871618beb88b50562d595c4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a0c1ec73d871618beb88b50562d595c4e" kindref="member">minDmaTransferSize</ref>;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a7576af366d6e4d35537bf367460c5b61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a7576af366d6e4d35537bf367460c5b61" kindref="member">mosiPin</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a3a385bc2935f75c7204f94183baa8877" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a3a385bc2935f75c7204f94183baa8877" kindref="member">misoPin</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1ad6e5aaeb0fad2b5ee18da0bf20dfc9fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1ad6e5aaeb0fad2b5ee18da0bf20dfc9fa" kindref="member">clkPin</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a48e4f5bcae539f4073b7ddead466212d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___h_w_attrs_v1_1a48e4f5bcae539f4073b7ddead466212d" kindref="member">csPin</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}<sp/><ref refid="_s_p_i_c_c32_x_x_d_m_a_8h_1a60415379dfba0b9b9ccb296ca3bfa6f3" kindref="member">SPICC32XXDMA_HWAttrsV1</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="struct_s_p_i_c_c32_x_x_d_m_a___object" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object" kindref="compound">SPICC32XXDMA_Object</ref><sp/>{</highlight></codeline>
<codeline lineno="323" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1ae863cbcc3e01afd9f39770aa2d1c4319" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>HwiP_Handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1ae863cbcc3e01afd9f39770aa2d1c4319" kindref="member">hwiHandle</ref>;</highlight></codeline>
<codeline lineno="324" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1ab5140ee0fcc7d595a2161f8113bc5e40" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_power___notify_obj__" kindref="compound">Power_NotifyObj</ref><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1ab5140ee0fcc7d595a2161f8113bc5e40" kindref="member">notifyObj</ref>;</highlight></codeline>
<codeline lineno="325" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a589d310cf371d850c3042a2f6d818fdc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>SemaphoreP_Handle<sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a589d310cf371d850c3042a2f6d818fdc" kindref="member">transferComplete</ref>;</highlight></codeline>
<codeline lineno="326" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a71196ba7a030f92216e1ed0c1de6f46d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_p_i_8h_1a207e2d5a7e7ea5606b6995b6485ca015" kindref="member">SPI_CallbackFxn</ref><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a71196ba7a030f92216e1ed0c1de6f46d" kindref="member">transferCallbackFxn</ref>;</highlight></codeline>
<codeline lineno="327" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1aac31afe2253a337b762803cc52a5f2fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i___transaction__" kindref="compound">SPI_Transaction</ref><sp/><sp/><sp/>*<ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1aac31afe2253a337b762803cc52a5f2fa" kindref="member">transaction</ref>;</highlight></codeline>
<codeline lineno="328" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a2d691cd67dcbab7f500f6d195e4a3099" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_u_d_m_a_c_c32_x_x___config" kindref="compound">UDMACC32XX_Handle</ref><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a2d691cd67dcbab7f500f6d195e4a3099" kindref="member">dmaHandle</ref>;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a0ab94161553f6a2079dad6eba06cb5bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a0ab94161553f6a2079dad6eba06cb5bc" kindref="member">amtDataXferred</ref>;</highlight></codeline>
<codeline lineno="331" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a506e33f66d1a09d0541b3fca6b4094f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a506e33f66d1a09d0541b3fca6b4094f4" kindref="member">currentXferAmt</ref>;</highlight></codeline>
<codeline lineno="332" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a678ee89e28ac21d13906d2a272d4a97f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a678ee89e28ac21d13906d2a272d4a97f" kindref="member">bitRate</ref>;</highlight></codeline>
<codeline lineno="333" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a01362bf375844471546ea23c7d281c17" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a01362bf375844471546ea23c7d281c17" kindref="member">dataSize</ref>;</highlight></codeline>
<codeline lineno="334" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a86745d5125686c887f89a5b81d90c936" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a86745d5125686c887f89a5b81d90c936" kindref="member">transferTimeout</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a65b24c5c45f95a0438d2bfc1e30e3d43" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_p_i_8h_1aaf545fda6ffd6648e2bc24d26cd26fc2" kindref="member">SPI_Mode</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a65b24c5c45f95a0438d2bfc1e30e3d43" kindref="member">spiMode</ref>;</highlight></codeline>
<codeline lineno="337" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a8da53459132b7c400a6c47b20895b79d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_p_i_8h_1aacc66eaab730438e7866bd7c90d29b19" kindref="member">SPI_TransferMode</ref><sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a8da53459132b7c400a6c47b20895b79d" kindref="member">transferMode</ref>;</highlight></codeline>
<codeline lineno="338" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a731b693df8585b8616036602aa2b5855" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_p_i_8h_1ad0f9402c803cdf9211e1db54da938f78" kindref="member">SPI_FrameFormat</ref><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a731b693df8585b8616036602aa2b5855" kindref="member">frameFormat</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a1ca6f5a591ebe0e2096090865b85e8e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a1ca6f5a591ebe0e2096090865b85e8e5" kindref="member">cancelInProgress</ref>;</highlight></codeline>
<codeline lineno="341" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a9e04b46d3a288089c4589fbed1b16a75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1a9e04b46d3a288089c4589fbed1b16a75" kindref="member">isOpen</ref>;</highlight></codeline>
<codeline lineno="342" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1ad806ef96c1f2cec040591305168ea971" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1ad806ef96c1f2cec040591305168ea971" kindref="member">rxFifoTrigger</ref>;</highlight></codeline>
<codeline lineno="343" refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1ab7dc9e7e23f2233d005b990d443a22f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_s_p_i_c_c32_x_x_d_m_a___object_1ab7dc9e7e23f2233d005b990d443a22f4" kindref="member">txFifoTrigger</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}<sp/><ref refid="_s_p_i_c_c32_x_x_d_m_a_8h_1a5af790fb533b67433e074e6e323b6e8d" kindref="member">SPICC32XXDMA_Object</ref>,<sp/>*<ref refid="_s_p_i_c_c32_x_x_d_m_a_8h_1a3111e84cd0c76d19a79c2ad1d12795c4" kindref="member">SPICC32XXDMA_Handle</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_spi_SPICC32XXDMA__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/spi/SPICC32XXDMA.h"/>
  </compounddef>
</doxygen>
