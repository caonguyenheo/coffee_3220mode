<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_p_w_m_8h" kind="file" language="C++">
    <compoundname>PWM.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includedby refid="_p_w_m_timer_c_c32_x_x_8h" local="no">PWMTimerCC32XX.h</includedby>
    <incdepgraph>
      <node id="194">
        <label>stdint.h</label>
      </node>
      <node id="193">
        <label>PWM.h</label>
        <link refid="_p_w_m_8h"/>
        <childnode refid="194" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="195">
        <label>PWM.h</label>
        <link refid="_p_w_m_8h"/>
        <childnode refid="196" relation="include">
        </childnode>
      </node>
      <node id="196">
        <label>PWMTimerCC32XX.h</label>
        <link refid="_p_w_m_timer_c_c32_x_x_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_p_w_m___params__" prot="public">PWM_Params_</innerclass>
    <innerclass refid="struct_p_w_m___fxn_table__" prot="public">PWM_FxnTable_</innerclass>
    <innerclass refid="struct_p_w_m___config__" prot="public">PWM_Config_</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_p_w_m_8h_1a8b2763bf16c6446a35d536ea532f6a6c" prot="public" static="no">
        <name>PWM_DUTY_FRACTION_MAX</name>
        <initializer>((uint32_t) ~0)</initializer>
        <briefdescription>
<para>Maximum duty (100%) when configuring duty cycle as a fraction of period. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="229" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_w_m_8h_1ad731f4db58c72d280900da4be6e3434c" prot="public" static="no">
        <name>PWM_CMD_RESERVED</name>
        <initializer>(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common PWM_control command code reservation offset. PWM driver implementations should offset command codes with PWM_CMD_RESERVED growing positively.</para><para>Example implementation specific command codes: <programlisting><codeline><highlight class="normal">#define<sp/>PWMXYZ_COMMAND0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PWM_CMD_RESERVED<sp/>+<sp/>0)</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PWMXYZ_COMMAND1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PWM_CMD_RESERVED<sp/>+<sp/>1)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="242" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_w_m_8h_1a88616e9288d6e3a4dbab321af26cc04a" prot="public" static="no">
        <name>PWM_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common PWM_control status code reservation offset. PWM driver implementations should offset status codes with PWM_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>PWMXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>(PWM_STATUS_RESERVED<sp/>-<sp/>0)</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PWMXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>(PWM_STATUS_RESERVED<sp/>-<sp/>1)</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PWMXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>(PWM_STATUS_RESERVED<sp/>-<sp/>2)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="256" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_w_m_8h_1a9b234f3cd0bdffc3da5b56a6c4db9563" prot="public" static="no">
        <name>PWM_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Success status code returned by: <ref refid="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" kindref="member">PWM_control()</ref>, <ref refid="_p_w_m_8h_1af72b43e2bcd68c0e78ae5dbe28db05c8" kindref="member">PWM_setDuty()</ref>, <ref refid="_p_w_m_8h_1afc1925126582a5a0721f992b92739e06" kindref="member">PWM_setPeriod()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return PWM_STATUS_SUCCESS if the call was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="265" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_w_m_8h_1a739297dfb10ab4363e7b5db30fdd1ce0" prot="public" static="no">
        <name>PWM_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code returned by <ref refid="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" kindref="member">PWM_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" kindref="member">PWM_control()</ref> returns PWM_STATUS_ERROR if the control code was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="273" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_w_m_8h_1afed58384f49ce364218eeaabb0858bea" prot="public" static="no">
        <name>PWM_STATUS_UNDEFINEDCMD</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" kindref="member">PWM_control()</ref> for undefined command codes. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" kindref="member">PWM_control()</ref> returns PWM_STATUS_UNDEFINEDCMD if the control code is not recognized by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="282" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_w_m_8h_1a5541b99566b02450b1d44b3bf0c344bc" prot="public" static="no">
        <name>PWM_STATUS_INVALID_PERIOD</name>
        <initializer>(-3)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_p_w_m_8h_1afc1925126582a5a0721f992b92739e06" kindref="member">PWM_setPeriod()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_p_w_m_8h_1afc1925126582a5a0721f992b92739e06" kindref="member">PWM_setPeriod()</ref> returns PWM_STATUS_INVALID_PERIOD if the period argument is invalid for the current configuration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="290" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_w_m_8h_1ac3b90551ab071520eccaabe4cabe1f1a" prot="public" static="no">
        <name>PWM_STATUS_INVALID_DUTY</name>
        <initializer>(-4)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_p_w_m_8h_1af72b43e2bcd68c0e78ae5dbe28db05c8" kindref="member">PWM_setDuty()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_p_w_m_8h_1af72b43e2bcd68c0e78ae5dbe28db05c8" kindref="member">PWM_setDuty()</ref> returns PWM_STATUS_INVALID_DUTY if the duty cycle argument is invalid for the current configuration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="298" column="9" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4" prot="public" static="no">
        <name>PWM_Period_Units_</name>
        <enumvalue id="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4a35d73e8e481d16fd8c3880d9519894cd" prot="public">
          <name>PWM_PERIOD_US</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Period in microseconds </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4a083c3462c199f39afc7a9d0541595b7a" prot="public">
          <name>PWM_PERIOD_HZ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Period in (reciprocal) Hertz (for example 2MHz = 0.5us period) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4a52a5ee3b990d5edb816d19253bd9a571" prot="public">
          <name>PWM_PERIOD_COUNTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Period in timer counts </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PWM period unit definitions. Refer to device specific implementation if using PWM_PERIOD_COUNTS (raw PWM/Timer counts). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="304" column="1" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="304" bodyend="309"/>
      </memberdef>
      <memberdef kind="enum" id="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04d" prot="public" static="no">
        <name>PWM_Duty_Units_</name>
        <enumvalue id="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04daf93cd02d0c2744e2d6a68a8e7070b7a6" prot="public">
          <name>PWM_DUTY_US</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Duty cycle in microseconds </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04da004d0d56bfc7f629990e7b6b55c3dd4f" prot="public">
          <name>PWM_DUTY_FRACTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Duty as a fractional part of PWM_DUTY_FRACTION_MAX </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04da4a20018a9620ed669dff0893858a44b2" prot="public">
          <name>PWM_DUTY_COUNTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Duty in timer counts </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PWM duty cycle unit definitions. Refer to device specific implementation if using PWM_DUTY_COUNTS (raw PWM/Timer counts). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="315" column="1" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="315" bodyend="319"/>
      </memberdef>
      <memberdef kind="enum" id="_p_w_m_8h_1acc99fb69a9bd9a6cc3710c4043893eb2" prot="public" static="no">
        <name>PWM_IdleLevel_</name>
        <enumvalue id="_p_w_m_8h_1acc99fb69a9bd9a6cc3710c4043893eb2a698cc876a94b3e0629d65fecfec8c8f5" prot="public">
          <name>PWM_IDLE_LOW</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_w_m_8h_1acc99fb69a9bd9a6cc3710c4043893eb2a0b126918629a951139ef9f17d417c50d" prot="public">
          <name>PWM_IDLE_HIGH</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Idle output level when PWM is not running (stopped / not started). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="324" column="1" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="324" bodyend="327"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_p_w_m_8h_1ac03072b64ddec3014d28e3bdcf6f84cb" prot="public" static="no">
        <type>enum <ref refid="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4" kindref="member">PWM_Period_Units_</ref></type>
        <definition>typedef enum PWM_Period_Units_  PWM_Period_Units</definition>
        <argsstring></argsstring>
        <name>PWM_Period_Units</name>
        <briefdescription>
<para>PWM period unit definitions. Refer to device specific implementation if using PWM_PERIOD_COUNTS (raw PWM/Timer counts). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1aad6f03b40ae1ba4362b264598c947e4c" prot="public" static="no">
        <type>enum <ref refid="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04d" kindref="member">PWM_Duty_Units_</ref></type>
        <definition>typedef enum PWM_Duty_Units_  PWM_Duty_Units</definition>
        <argsstring></argsstring>
        <name>PWM_Duty_Units</name>
        <briefdescription>
<para>PWM duty cycle unit definitions. Refer to device specific implementation if using PWM_DUTY_COUNTS (raw PWM/Timer counts). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1aac611844d55b6be24f8a56902df9412f" prot="public" static="no">
        <type>enum <ref refid="_p_w_m_8h_1acc99fb69a9bd9a6cc3710c4043893eb2" kindref="member">PWM_IdleLevel_</ref></type>
        <definition>typedef enum PWM_IdleLevel_  PWM_IdleLevel</definition>
        <argsstring></argsstring>
        <name>PWM_IdleLevel</name>
        <briefdescription>
<para>Idle output level when PWM is not running (stopped / not started). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a98547cb712ea8f4f586706414e9fae5a" prot="public" static="no">
        <type>struct <ref refid="struct_p_w_m___params__" kindref="compound">PWM_Params_</ref></type>
        <definition>typedef struct PWM_Params_  PWM_Params</definition>
        <argsstring></argsstring>
        <name>PWM_Params</name>
        <briefdescription>
<para>PWM Parameters. </para>        </briefdescription>
        <detaileddescription>
<para>PWM Parameters are used to with the <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> call. Default values for these parameters are set using <ref refid="_p_w_m_8h_1acbdd3192f9f06bf689e4a3855926dcac" kindref="member">PWM_Params_init()</ref>.</para><para><simplesect kind="see"><para><ref refid="_p_w_m_8h_1acbdd3192f9f06bf689e4a3855926dcac" kindref="member">PWM_Params_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" prot="public" static="no">
        <type>struct <ref refid="struct_p_w_m___config__" kindref="compound">PWM_Config_</ref> *</type>
        <definition>typedef struct PWM_Config_* PWM_Handle</definition>
        <argsstring></argsstring>
        <name>PWM_Handle</name>
        <briefdescription>
<para>A handle that is returned from a <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="350" column="1" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a1643d365dfa900197b324ea74035d2ec" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PWM_CloseFxn) (PWM_Handle handle)</definition>
        <argsstring>)(PWM_Handle handle)</argsstring>
        <name>PWM_CloseFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1a0e0f5899b067d27653db566fb148db11" kindref="member">PWM_close()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="356" column="1" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a0ac1147ec944a3873ec1dad81d8c949f" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* PWM_ControlFxn) (PWM_Handle handle, uint_fast16_t cmd, void *arg)</definition>
        <argsstring>)(PWM_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>PWM_ControlFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" kindref="member">PWM_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="362" column="1" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a38666ae4b117b81d35758258012b251a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PWM_InitFxn) (PWM_Handle handle)</definition>
        <argsstring>)(PWM_Handle handle)</argsstring>
        <name>PWM_InitFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1aadae3fe77e36cbf9643a22eeb99fb01e" kindref="member">PWM_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="368" column="1" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a16b7b446398f8b90e4fa287c6e4a0981" prot="public" static="no">
        <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref>(*</type>
        <definition>typedef PWM_Handle(* PWM_OpenFxn) (PWM_Handle handle, PWM_Params *params)</definition>
        <argsstring>)(PWM_Handle handle, PWM_Params *params)</argsstring>
        <name>PWM_OpenFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="374" column="1" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a7e90114309f62bc7ddf878c2e1b46cd2" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* PWM_SetDutyFxn) (PWM_Handle handle, uint32_t duty)</definition>
        <argsstring>)(PWM_Handle handle, uint32_t duty)</argsstring>
        <name>PWM_SetDutyFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1af72b43e2bcd68c0e78ae5dbe28db05c8" kindref="member">PWM_setDuty()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="380" column="1" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a2761c0836cae3a3d56cf8e819d54a214" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* PWM_SetPeriodFxn) (PWM_Handle handle, uint32_t period)</definition>
        <argsstring>)(PWM_Handle handle, uint32_t period)</argsstring>
        <name>PWM_SetPeriodFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1afc1925126582a5a0721f992b92739e06" kindref="member">PWM_setPeriod()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="387" column="1" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1af0a392fb66c104f9d60e80e023dd3b89" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PWM_StartFxn) (PWM_Handle handle)</definition>
        <argsstring>)(PWM_Handle handle)</argsstring>
        <name>PWM_StartFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1aa1bd0cc3f0fa52879422fca74d254378" kindref="member">PWM_start()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="394" column="1" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1aff8ad682f40a810ecf03824e8e190087" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PWM_StopFxn) (PWM_Handle handle)</definition>
        <argsstring>)(PWM_Handle handle)</argsstring>
        <name>PWM_StopFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_p_w_m_8h_1ae83a4cd327a07d6037ff1a8d72fb3ae6" kindref="member">PWM_stop()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="400" column="1" bodyfile="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1a1c3809a9bd3c63a04edc1bafa78cc2e2" prot="public" static="no">
        <type>struct <ref refid="struct_p_w_m___fxn_table__" kindref="compound">PWM_FxnTable_</ref></type>
        <definition>typedef struct PWM_FxnTable_  PWM_FxnTable</definition>
        <argsstring></argsstring>
        <name>PWM_FxnTable</name>
        <briefdescription>
<para>The definition of a PWM function table that contains the required set of functions to control a specific PWM driver implementation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="424" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_w_m_8h_1af4fdcd36077e2aba99d6996ae1ea64ec" prot="public" static="no">
        <type>struct <ref refid="struct_p_w_m___config__" kindref="compound">PWM_Config_</ref></type>
        <definition>typedef struct PWM_Config_  PWM_Config</definition>
        <argsstring></argsstring>
        <name>PWM_Config</name>
        <briefdescription>
<para>PWM Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The PWM_Config structure contains a set of pointers used to characterize the PWM driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="440" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_p_w_m_8h_1a0e0f5899b067d27653db566fb148db11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PWM_close</definition>
        <argsstring>(PWM_Handle handle)</argsstring>
        <name>PWM_close</name>
        <param>
          <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close a PWM instance specified by the PWM handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> must have been called first. </para></simplesect>
<simplesect kind="pre"><para><ref refid="_p_w_m_8h_1ae83a4cd327a07d6037ff1a8d72fb3ae6" kindref="member">PWM_stop()</ref> must have been called first if PWM was started.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PWM handle returned from <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1aa1bd0cc3f0fa52879422fca74d254378" kindref="member">PWM_start()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae83a4cd327a07d6037ff1a8d72fb3ae6" kindref="member">PWM_stop()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t PWM_control</definition>
        <argsstring>(PWM_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>PWM_control</name>
        <param>
          <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Function performs implementation specific features on a given PWM_Handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> must have been called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PWM handle returned from <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>A command value defined by the driver specific implementation.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an optional R/W (read/write) argument that is accompanied with cmd.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A PWM_Status describing an error or success state. Negative values indicate an error occurred.</para></simplesect>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1aadae3fe77e36cbf9643a22eeb99fb01e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PWM_init</definition>
        <argsstring>(void)</argsstring>
        <name>PWM_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function initializes the PWM module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The PWM_config structure must exist and be persistent before this function can be called. This function must be called before any other PWM driver APIs. This function does not modify any peripheral registers &amp; should only be called once. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref></type>
        <definition>PWM_Handle PWM_open</definition>
        <argsstring>(uint_least8_t index, PWM_Params *params)</argsstring>
        <name>PWM_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="_p_w_m_8h_1a98547cb712ea8f4f586706414e9fae5a" kindref="member">PWM_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>This function opens a given PWM instance and sets the period, duty and idle level to those specified in the params argument. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical instance number for the PWM indexed into the PWM_config table.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an parameter structure. If NULL default values are used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A PWM_Handle if successful or NULL on an error or if it has been opened already. If NULL is returned further PWM API calls will result in undefined behavior.</para></simplesect>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1a0e0f5899b067d27653db566fb148db11" kindref="member">PWM_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="504" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1acbdd3192f9f06bf689e4a3855926dcac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PWM_Params_init</definition>
        <argsstring>(PWM_Params *params)</argsstring>
        <name>PWM_Params_init</name>
        <param>
          <type><ref refid="_p_w_m_8h_1a98547cb712ea8f4f586706414e9fae5a" kindref="member">PWM_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the PWM_Params structure to default values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to PWM_Params structure for initialization.</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: Period units: PWM_PERIOD_HZ Period: 1e6 (1MHz) Duty cycle units: PWM_DUTY_FRACTION Duty cycle: 0% Idle level: PWM_IDLE_LOW </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="518" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1af72b43e2bcd68c0e78ae5dbe28db05c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t PWM_setDuty</definition>
        <argsstring>(PWM_Handle handle, uint32_t duty)</argsstring>
        <name>PWM_setDuty</name>
        <param>
          <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>duty</declname>
        </param>
        <briefdescription>
<para>Function to set the duty cycle of the specified PWM handle. PWM instances run in active high output mode; 0% is always low output, 100% is always high output. This API can be called while the PWM is running &amp; duty must always be lower than or equal to the period. If an error occurs while calling the function the PWM duty cycle will remain unchanged. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> must have been called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PWM handle returned from <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duty</parametername>
</parameternamelist>
<parameterdescription>
<para>Duty cycle in the units specified by the params used in <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A PWM status describing an error or success. Negative values indicate an error.</para></simplesect>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="540" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1afc1925126582a5a0721f992b92739e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t PWM_setPeriod</definition>
        <argsstring>(PWM_Handle handle, uint32_t period)</argsstring>
        <name>PWM_setPeriod</name>
        <param>
          <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Function to set the period of the specified PWM handle. This API can be called while the PWM is running &amp; the period must always be larger than the duty cycle. If an error occurs while calling the function the PWM period will remain unchanged. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> must have been called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PWM handle returned from <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Period in the units specified by the params used in <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A PWM status describing an error or success state. Negative values indicate an error.</para></simplesect>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="561" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1aa1bd0cc3f0fa52879422fca74d254378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PWM_start</definition>
        <argsstring>(PWM_Handle handle)</argsstring>
        <name>PWM_start</name>
        <param>
          <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to start the specified PWM handle with current settings. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> has to have been called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PWM handle returned from <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae83a4cd327a07d6037ff1a8d72fb3ae6" kindref="member">PWM_stop()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="573" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_w_m_8h_1ae83a4cd327a07d6037ff1a8d72fb3ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PWM_stop</definition>
        <argsstring>(PWM_Handle handle)</argsstring>
        <name>PWM_stop</name>
        <param>
          <type><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to stop the specified PWM handle. Output will set to the idle level specified by params in <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> has to have been called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A PWM handle returned from <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_p_w_m_8h_1aa1bd0cc3f0fa52879422fca74d254378" kindref="member">PWM_start()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h" line="586" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>PWM driver interface. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para>To use the PWM driver, ensure that the correct driver library for your device is linked in and include this header file as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/PWM.h&gt;</highlight></codeline>
</programlisting></para><para>This module serves as the main interface for applications. Its purpose is to redirect the PWM APIs to specific driver implementations which are specified using a pointer to a <ref refid="_p_w_m_8h_1a1c3809a9bd3c63a04edc1bafa78cc2e2" kindref="member">PWM_FxnTable</ref>.</para><para><heading level="1">Overview</heading>
</para><para>The PWM driver in TI-RTOS facilitates the generation of Pulse Width Modulated signals via simple and portable APIs. PWM instances must be opened by calling <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> while passing in a PWM index and a parameters data structure.</para><para>The driver APIs serve as an interface to a typical TI-RTOS application. The specific peripheral implementations are responsible for creating all OS specific primitives to allow for thread-safe operation.</para><para>When a PWM instance is opened, the period, duty cycle and idle level are configured and the PWM is stopped (waveforms not generated until <ref refid="_p_w_m_8h_1aa1bd0cc3f0fa52879422fca74d254378" kindref="member">PWM_start()</ref> is called). The maximum period and duty supported is device dependent; refer to the implementation specific documentation for values.</para><para>PWM outputs are active-high, meaning the duty will control the duration of high output on the pin (at 0% duty, the output is always low, at 100% duty, the output is always high).</para><para><heading level="1">Usage</heading>
</para><para><programlisting><codeline><highlight class="normal">PWM_Handle<sp/>pwm;</highlight></codeline>
<codeline><highlight class="normal">PWM_Params<sp/>pwmParams;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>the<sp/>PWM<sp/>driver.</highlight></codeline>
<codeline><highlight class="normal">PWM_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>the<sp/>PWM<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal">PWM_Params_init(&amp;pwmParams);</highlight></codeline>
<codeline><highlight class="normal">pwmParams.idleLevel<sp/>=<sp/>PWM_IDLE_LOW;<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Output<sp/>low<sp/>when<sp/>PWM<sp/>is<sp/>not<sp/>running</highlight></codeline>
<codeline><highlight class="normal">pwmParams.periodUnits<sp/>=<sp/>PWM_PERIOD_HZ;<sp/><sp/><sp/>//<sp/>Period<sp/>is<sp/>in<sp/>Hz</highlight></codeline>
<codeline><highlight class="normal">pwmParams.periodValue<sp/>=<sp/>1e6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>1MHz</highlight></codeline>
<codeline><highlight class="normal">pwmParams.dutyUnits<sp/>=<sp/>PWM_DUTY_FRACTION;<sp/>//<sp/>Duty<sp/>is<sp/>in<sp/>fractional<sp/>percentage</highlight></codeline>
<codeline><highlight class="normal">pwmParams.dutyValue<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>0%<sp/>initial<sp/>duty<sp/>cycle</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Open<sp/>the<sp/>PWM<sp/>instance</highlight></codeline>
<codeline><highlight class="normal">pwm<sp/>=<sp/>PWM_open(Board_PWM0,<sp/>&amp;pwmParams);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(pwm<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>PWM_open()<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PWM_start(pwm);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>start<sp/>PWM<sp/>with<sp/>0%<sp/>duty<sp/>cycle</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PWM_setDuty(pwm,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(PWM_DUTY_FRACTION_MAX<sp/>/<sp/>2));<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>set<sp/>duty<sp/>cycle<sp/>to<sp/>50%</highlight></codeline>
</programlisting></para><para>Details for the example code above are described in the following subsections.</para><para><heading level="3">PWM Driver Configuration</heading>
</para><para>In order to use the PWM APIs, the application is required to provide device-specific PWM configuration in the Board.c file. The PWM driver interface defines a configuration data structure:</para><para><programlisting><codeline><highlight class="normal">typedef<sp/>struct<sp/>PWM_Config_<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PWM_FxnTable<sp/>const<sp/><sp/><sp/><sp/>*fxnTablePtr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*object;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><sp/><sp/><sp/>*hwAttrs;</highlight></codeline>
<codeline><highlight class="normal">}<sp/>PWM_Config;</highlight></codeline>
</programlisting></para><para>The application must declare an array of PWM_Config elements, named PWM_config[]. Each element of PWM_config[] is populated with pointers to a device specific PWM driver implementation&apos;s function table, driver object, and hardware attributes. The hardware attributes define properties such as which pin will be driven, and which timer peripheral will be used. Each element in PWM_config[] corresponds to a PWM instance, and none of the elements should have NULL pointers.</para><para>Additionally, the PWM driver interface defines a global integer variable &apos;PWM_count&apos; which is initialized to the number of PWM instances the application has defined in the PWM_Config array.</para><para>You will need to check the device-specific PWM driver implementation&apos;s header file for example configuration. Please also refer to the Board.c file of any of your examples to see the PWM configuration.</para><para><heading level="3">Initializing the PWM Driver</heading>
</para><para><ref refid="_p_w_m_8h_1aadae3fe77e36cbf9643a22eeb99fb01e" kindref="member">PWM_init()</ref> must be called before any other PWM APIs. This function calls the device implementation&apos;s PWM initialization function, for each element of PWM_config[].</para><para><heading level="3">Opening the PWM Driver</heading>
</para><para>Opening a PWM requires four steps:<orderedlist>
<listitem><para>Create and initialize a PWM_Params structure.</para></listitem><listitem><para>Fill in the desired parameters.</para></listitem><listitem><para>Call <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>, passing the index of the PWM in the PWM_config structure, and the address of the PWM_Params structure. The PWM instance is specified by the index in the PWM_config structure.</para></listitem><listitem><para>Check that the PWM handle returned by <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> is non-NULL, and save it. The handle will be used to read and write to the PWM you just opened.</para></listitem></orderedlist>
</para><para>Only one PWM index can be used at a time; calling <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> a second time with the same index previously passed to <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref> will result in an error. You can, though, re-use the index if the instance is closed via <ref refid="_p_w_m_8h_1a0e0f5899b067d27653db566fb148db11" kindref="member">PWM_close()</ref>. In the example code, Board_PWM0 is passed to <ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open()</ref>. This macro is defined in the example&apos;s Board.h file.</para><para><heading level="3">Modes of Operation</heading>
</para><para>A PWM instance can be configured to interpret the period as one of three units:<itemizedlist>
<listitem><para><ref refid="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4a35d73e8e481d16fd8c3880d9519894cd" kindref="member">PWM_PERIOD_US</ref>: The period is in microseconds.</para></listitem><listitem><para><ref refid="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4a083c3462c199f39afc7a9d0541595b7a" kindref="member">PWM_PERIOD_HZ</ref>: The period is in (reciprocal) Hertz.</para></listitem><listitem><para><ref refid="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4a52a5ee3b990d5edb816d19253bd9a571" kindref="member">PWM_PERIOD_COUNTS</ref>: The period is in timer counts.</para></listitem></itemizedlist>
</para><para>A PWM instance can be configured to interpret the duty as one of three units:<itemizedlist>
<listitem><para><ref refid="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04daf93cd02d0c2744e2d6a68a8e7070b7a6" kindref="member">PWM_DUTY_US</ref>: The duty is in microseconds.</para></listitem><listitem><para><ref refid="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04da004d0d56bfc7f629990e7b6b55c3dd4f" kindref="member">PWM_DUTY_FRACTION</ref>: The duty is in a fractional part of the period where 0 is 0% and <ref refid="_p_w_m_8h_1a8b2763bf16c6446a35d536ea532f6a6c" kindref="member">PWM_DUTY_FRACTION_MAX</ref> is 100%.</para></listitem><listitem><para><ref refid="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04da4a20018a9620ed669dff0893858a44b2" kindref="member">PWM_DUTY_COUNTS</ref>: The period is in timer counts and must be less than the period.</para></listitem></itemizedlist>
</para><para>The idle level parameter is used to set the output to high/low when the PWM is not running (stopped or not started). The idle level can be set to:<itemizedlist>
<listitem><para><ref refid="_p_w_m_8h_1acc99fb69a9bd9a6cc3710c4043893eb2a698cc876a94b3e0629d65fecfec8c8f5" kindref="member">PWM_IDLE_LOW</ref></para></listitem><listitem><para><ref refid="_p_w_m_8h_1acc99fb69a9bd9a6cc3710c4043893eb2a0b126918629a951139ef9f17d417c50d" kindref="member">PWM_IDLE_HIGH</ref></para></listitem></itemizedlist>
</para><para>The default PWM configuration is to set a duty of 0% with a 1MHz frequency. The default period units are in PWM_PERIOD_HZ and the default duty units are in PWM_DUTY_FRACTION. Finally, the default output idle level is PWM_IDLE_LOW. It is the application&apos;s responsibility to set the duty for each PWM output used.</para><para><heading level="3">Controlling the PWM Duty Cycle</heading>
</para><para>Once the PWM instance has been opened and started, the primary API used by the application will be <ref refid="_p_w_m_8h_1af72b43e2bcd68c0e78ae5dbe28db05c8" kindref="member">PWM_setDuty()</ref> to control the duty cycle of a PWM pin:</para><para><programlisting><codeline><highlight class="normal">PWM_setDuty(pwm,<sp/>PWM_DUTY_FRACTION_MAX<sp/>/<sp/>2);<sp/>//<sp/>Set<sp/>50%<sp/>duty<sp/>cycle</highlight></codeline>
</programlisting></para><para><heading level="1">Implementation</heading>
</para><para>The PWM driver interface module is joined (at link time) to an array of PWM_Config data structures named <emphasis>PWM_config</emphasis>. PWM_config is implemented in the application with each entry being a PWM instance. Each entry in <emphasis>PWM_config</emphasis> contains a:<itemizedlist>
<listitem><para>(PWM_FxnTable *) to a set of functions that implement a PWM peripheral</para></listitem><listitem><para>(void *) data object that is associated with the PWM_FxnTable</para></listitem><listitem><para>(void *) hardware attributes that are associated with the PWM_FxnTable</para></listitem></itemizedlist>
</para><para>The PWM APIs are redirected to the device specific implementations using the PWM_FxnTable pointer of the PWM_config entry. In order to use device specific functions of the PWM driver directly, link in the correct driver library for your device and include the device specific PWM driver header file (which in turn includes <ref refid="_p_w_m_8h" kindref="compound">PWM.h</ref>). For example, for the MSP432 family of devices, you would include the following header file: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/pwm/PWMTimerMSP432.h&gt;</highlight></codeline>
</programlisting> <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2017,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_PWM__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_PWM__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="_p_w_m_8h_1a8b2763bf16c6446a35d536ea532f6a6c" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_DUTY_FRACTION_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)<sp/>~0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="_p_w_m_8h_1ad731f4db58c72d280900da4be6e3434c" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_CMD_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="_p_w_m_8h_1a88616e9288d6e3a4dbab321af26cc04a" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="_p_w_m_8h_1a9b234f3cd0bdffc3da5b56a6c4db9563" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="_p_w_m_8h_1a739297dfb10ab4363e7b5db30fdd1ce0" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="_p_w_m_8h_1afed58384f49ce364218eeaabb0858bea" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_STATUS_UNDEFINEDCMD<sp/><sp/><sp/><sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="_p_w_m_8h_1a5541b99566b02450b1d44b3bf0c344bc" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_STATUS_INVALID_PERIOD<sp/><sp/><sp/><sp/>(-3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="_p_w_m_8h_1ac3b90551ab071520eccaabe4cabe1f1a" refkind="member"><highlight class="preprocessor">#define<sp/>PWM_STATUS_INVALID_DUTY<sp/><sp/><sp/><sp/><sp/><sp/>(-4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="304" refid="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4" kindref="member">PWM_Period_Units_</ref><sp/>{</highlight></codeline>
<codeline lineno="305" refid="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4a35d73e8e481d16fd8c3880d9519894cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4a35d73e8e481d16fd8c3880d9519894cd" kindref="member">PWM_PERIOD_US</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="306" refid="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4a083c3462c199f39afc7a9d0541595b7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4a083c3462c199f39afc7a9d0541595b7a" kindref="member">PWM_PERIOD_HZ</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="308" refid="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4a52a5ee3b990d5edb816d19253bd9a571" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a8dc2ea12024d7fb9c9b3e7de857c51d4a52a5ee3b990d5edb816d19253bd9a571" kindref="member">PWM_PERIOD_COUNTS</ref><sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal">}<sp/><ref refid="_p_w_m_8h_1ac03072b64ddec3014d28e3bdcf6f84cb" kindref="member">PWM_Period_Units</ref>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04d" kindref="member">PWM_Duty_Units_</ref><sp/>{</highlight></codeline>
<codeline lineno="316" refid="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04daf93cd02d0c2744e2d6a68a8e7070b7a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04daf93cd02d0c2744e2d6a68a8e7070b7a6" kindref="member">PWM_DUTY_US</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="317" refid="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04da004d0d56bfc7f629990e7b6b55c3dd4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04da004d0d56bfc7f629990e7b6b55c3dd4f" kindref="member">PWM_DUTY_FRACTION</ref>,<sp/></highlight></codeline>
<codeline lineno="318" refid="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04da4a20018a9620ed669dff0893858a44b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a67e37012dcff827ed24c4efde25ee04da4a20018a9620ed669dff0893858a44b2" kindref="member">PWM_DUTY_COUNTS</ref><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="319"><highlight class="normal">}<sp/><ref refid="_p_w_m_8h_1aad6f03b40ae1ba4362b264598c947e4c" kindref="member">PWM_Duty_Units</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="_p_w_m_8h_1acc99fb69a9bd9a6cc3710c4043893eb2" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_p_w_m_8h_1acc99fb69a9bd9a6cc3710c4043893eb2" kindref="member">PWM_IdleLevel_</ref><sp/>{</highlight></codeline>
<codeline lineno="325" refid="_p_w_m_8h_1acc99fb69a9bd9a6cc3710c4043893eb2a698cc876a94b3e0629d65fecfec8c8f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1acc99fb69a9bd9a6cc3710c4043893eb2a698cc876a94b3e0629d65fecfec8c8f5" kindref="member">PWM_IDLE_LOW</ref><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="326" refid="_p_w_m_8h_1acc99fb69a9bd9a6cc3710c4043893eb2a0b126918629a951139ef9f17d417c50d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1acc99fb69a9bd9a6cc3710c4043893eb2a0b126918629a951139ef9f17d417c50d" kindref="member">PWM_IDLE_HIGH</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}<sp/><ref refid="_p_w_m_8h_1aac611844d55b6be24f8a56902df9412f" kindref="member">PWM_IdleLevel</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="struct_p_w_m___params__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_w_m___params__" kindref="compound">PWM_Params_</ref><sp/>{</highlight></codeline>
<codeline lineno="338" refid="struct_p_w_m___params___1abab0fdd6c9a5087129529e909d497f94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PWM_Period_Units<sp/><ref refid="struct_p_w_m___params___1abab0fdd6c9a5087129529e909d497f94" kindref="member">periodUnits</ref>;<sp/></highlight></codeline>
<codeline lineno="339" refid="struct_p_w_m___params___1a37a9a09b2a7269559e33e89637f9ae4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___params___1a37a9a09b2a7269559e33e89637f9ae4e" kindref="member">periodValue</ref>;<sp/></highlight></codeline>
<codeline lineno="340" refid="struct_p_w_m___params___1af38fb2e3a11fd285b1268193b21b4af5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>PWM_Duty_Units<sp/><sp/><sp/><ref refid="struct_p_w_m___params___1af38fb2e3a11fd285b1268193b21b4af5" kindref="member">dutyUnits</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="341" refid="struct_p_w_m___params___1a5e81721a07b2970fe6f6d9e566d22a6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___params___1a5e81721a07b2970fe6f6d9e566d22a6e" kindref="member">dutyValue</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="342" refid="struct_p_w_m___params___1ad0949da9ee4cf2c9c6f9d4a0c2220c79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1aac611844d55b6be24f8a56902df9412f" kindref="member">PWM_IdleLevel</ref><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___params___1ad0949da9ee4cf2c9c6f9d4a0c2220c79" kindref="member">idleLevel</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="343" refid="struct_p_w_m___params___1aebd85020bede0f36f0425f0eab9f822d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_p_w_m___params___1aebd85020bede0f36f0425f0eab9f822d" kindref="member">custom</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="345"><highlight class="normal">}<sp/><ref refid="_p_w_m_8h_1a98547cb712ea8f4f586706414e9fae5a" kindref="member">PWM_Params</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_w_m___config__" kindref="compound">PWM_Config_</ref><sp/>*<ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref>;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="_p_w_m_8h_1a1643d365dfa900197b324ea74035d2ec" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_p_w_m_8h_1a1643d365dfa900197b324ea74035d2ec" kindref="member">PWM_CloseFxn</ref>)<sp/>(PWM_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="_p_w_m_8h_1a0ac1147ec944a3873ec1dad81d8c949f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_p_w_m_8h_1a0ac1147ec944a3873ec1dad81d8c949f" kindref="member">PWM_ControlFxn</ref>)<sp/>(PWM_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="368" refid="_p_w_m_8h_1a38666ae4b117b81d35758258012b251a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_p_w_m_8h_1a38666ae4b117b81d35758258012b251a" kindref="member">PWM_InitFxn</ref>)<sp/>(PWM_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="_p_w_m_8h_1a16b7b446398f8b90e4fa287c6e4a0981" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_p_w_m_8h_1abd13611c9e61099dd02f1c87d9e9793d" kindref="member">PWM_Handle</ref><sp/>(*<ref refid="_p_w_m_8h_1a16b7b446398f8b90e4fa287c6e4a0981" kindref="member">PWM_OpenFxn</ref>)<sp/>(PWM_Handle<sp/>handle,<sp/><ref refid="struct_p_w_m___params__" kindref="compound">PWM_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="_p_w_m_8h_1a7e90114309f62bc7ddf878c2e1b46cd2" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_p_w_m_8h_1a7e90114309f62bc7ddf878c2e1b46cd2" kindref="member">PWM_SetDutyFxn</ref>)<sp/>(PWM_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>duty);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="387" refid="_p_w_m_8h_1a2761c0836cae3a3d56cf8e819d54a214" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_p_w_m_8h_1a2761c0836cae3a3d56cf8e819d54a214" kindref="member">PWM_SetPeriodFxn</ref>)<sp/>(PWM_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>period);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="_p_w_m_8h_1af0a392fb66c104f9d60e80e023dd3b89" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_p_w_m_8h_1af0a392fb66c104f9d60e80e023dd3b89" kindref="member">PWM_StartFxn</ref>)<sp/>(PWM_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="_p_w_m_8h_1aff8ad682f40a810ecf03824e8e190087" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_p_w_m_8h_1aff8ad682f40a810ecf03824e8e190087" kindref="member">PWM_StopFxn</ref>)<sp/>(PWM_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="struct_p_w_m___fxn_table__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_w_m___fxn_table__" kindref="compound">PWM_FxnTable_</ref><sp/>{</highlight></codeline>
<codeline lineno="409" refid="struct_p_w_m___fxn_table___1aa762279c4052544260de1030664f2ab0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a1643d365dfa900197b324ea74035d2ec" kindref="member">PWM_CloseFxn</ref><sp/><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table___1aa762279c4052544260de1030664f2ab0" kindref="member">closeFxn</ref>;</highlight></codeline>
<codeline lineno="411" refid="struct_p_w_m___fxn_table___1a0fa8ed3f89c78c39be160efedf5344d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a0ac1147ec944a3873ec1dad81d8c949f" kindref="member">PWM_ControlFxn</ref><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table___1a0fa8ed3f89c78c39be160efedf5344d8" kindref="member">controlFxn</ref>;</highlight></codeline>
<codeline lineno="413" refid="struct_p_w_m___fxn_table___1a1698c7ea2dc391cd3b445c1ac532ce3f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a38666ae4b117b81d35758258012b251a" kindref="member">PWM_InitFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table___1a1698c7ea2dc391cd3b445c1ac532ce3f" kindref="member">initFxn</ref>;</highlight></codeline>
<codeline lineno="415" refid="struct_p_w_m___fxn_table___1a29e0d64f10ef19b8729f8fec2a07f9e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a16b7b446398f8b90e4fa287c6e4a0981" kindref="member">PWM_OpenFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table___1a29e0d64f10ef19b8729f8fec2a07f9e1" kindref="member">openFxn</ref>;</highlight></codeline>
<codeline lineno="417" refid="struct_p_w_m___fxn_table___1a0f886757fbe16e89545ab64b8d5c4ac5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a7e90114309f62bc7ddf878c2e1b46cd2" kindref="member">PWM_SetDutyFxn</ref><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table___1a0f886757fbe16e89545ab64b8d5c4ac5" kindref="member">setDutyFxn</ref>;</highlight></codeline>
<codeline lineno="419" refid="struct_p_w_m___fxn_table___1a47c0e665d032075f42dd41841a0eb9e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1a2761c0836cae3a3d56cf8e819d54a214" kindref="member">PWM_SetPeriodFxn</ref><sp/><ref refid="struct_p_w_m___fxn_table___1a47c0e665d032075f42dd41841a0eb9e0" kindref="member">setPeriodFxn</ref>;</highlight></codeline>
<codeline lineno="421" refid="struct_p_w_m___fxn_table___1aca222c4acfc632a9855fdfdefb833780" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1af0a392fb66c104f9d60e80e023dd3b89" kindref="member">PWM_StartFxn</ref><sp/><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table___1aca222c4acfc632a9855fdfdefb833780" kindref="member">startFxn</ref>;</highlight></codeline>
<codeline lineno="423" refid="struct_p_w_m___fxn_table___1aa7ab83d44d13aa21391180e3cc39a687" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_w_m_8h_1aff8ad682f40a810ecf03824e8e190087" kindref="member">PWM_StopFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table___1aa7ab83d44d13aa21391180e3cc39a687" kindref="member">stopFxn</ref>;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}<sp/><ref refid="_p_w_m_8h_1a1c3809a9bd3c63a04edc1bafa78cc2e2" kindref="member">PWM_FxnTable</ref>;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="struct_p_w_m___config__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_w_m___config__" kindref="compound">PWM_Config_</ref><sp/>{</highlight></codeline>
<codeline lineno="435" refid="struct_p_w_m___config___1a36b812aeed91072b4a917e7342278d3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_p_w_m___fxn_table__" kindref="compound">PWM_FxnTable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_p_w_m___config___1a36b812aeed91072b4a917e7342278d3b" kindref="member">fxnTablePtr</ref>;</highlight></codeline>
<codeline lineno="437" refid="struct_p_w_m___config___1ab0f7f8412e33fb690759b836069356a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_p_w_m___config___1ab0f7f8412e33fb690759b836069356a2" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="439" refid="struct_p_w_m___config___1a93a946b1ade9f430d4d1aae474e41f6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_p_w_m___config___1a93a946b1ade9f430d4d1aae474e41f6c" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}<sp/><ref refid="_p_w_m_8h_1af4fdcd36077e2aba99d6996ae1ea64ec" kindref="member">PWM_Config</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_w_m_8h_1a0e0f5899b067d27653db566fb148db11" kindref="member">PWM_close</ref>(PWM_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_p_w_m_8h_1a7f5a5dd263b9d95f4fd71fbb69455369" kindref="member">PWM_control</ref>(PWM_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_w_m_8h_1aadae3fe77e36cbf9643a22eeb99fb01e" kindref="member">PWM_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>PWM_Handle<sp/><ref refid="_p_w_m_8h_1ae97f12cfc5530577069f76813504da3a" kindref="member">PWM_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_p_w_m___params__" kindref="compound">PWM_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_w_m_8h_1acbdd3192f9f06bf689e4a3855926dcac" kindref="member">PWM_Params_init</ref>(<ref refid="struct_p_w_m___params__" kindref="compound">PWM_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_p_w_m_8h_1af72b43e2bcd68c0e78ae5dbe28db05c8" kindref="member">PWM_setDuty</ref>(PWM_Handle<sp/>handle,<sp/>uint32_t<sp/>duty);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_p_w_m_8h_1afc1925126582a5a0721f992b92739e06" kindref="member">PWM_setPeriod</ref>(PWM_Handle<sp/>handle,<sp/>uint32_t<sp/>period);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_w_m_8h_1aa1bd0cc3f0fa52879422fca74d254378" kindref="member">PWM_start</ref>(PWM_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_w_m_8h_1ae83a4cd327a07d6037ff1a8d72fb3ae6" kindref="member">PWM_stop</ref>(PWM_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_PWM__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_cc32xx_3_60_01_00/source/ti/drivers/PWM.h"/>
  </compounddef>
</doxygen>
